<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我对js隐式转换终于不用再靠_猜_了！</title>
      <link href="/p/631632b8/"/>
      <url>/p/631632b8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在项目开发或者面试中经常出现下面这种判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; - &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] - []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] + [<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] == ![]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; == &#123;&#125;);</span><br></pre></td></tr></table></figure><p>结果分别是：<code>NaN、0、1,2、true、false</code></p><h1 id="二、包装类"><a href="#二、包装类" class="headerlink" title="二、包装类"></a>二、包装类</h1><p>包装类是我们理解隐式转化的基础工具,是理解隐式转化的根基。<br>js 中包装类分为：Boolean()、Number()、String()。</p><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h2><p><code>Boolean()</code>只有两种值：<code>true</code>和<code>false</code><br>其中值为<code>false</code>的称为<code>falsey</code>或<code>虚值</code>，分别包括 0、null、undefined、false、’’，NaN；<br>而值为<code>true</code>的称为<code>truth</code>，除了<code>falsey</code>其他的返回都是<code>true</code></p><h2 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h2><p><code>Number()</code>的处理就分为对 基础类型 的处理和 引用类型 的处理。</p><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">null</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">undefined</span>)) <span class="comment">// MaM</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;1&#x27;</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;&#x27;</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="title class_">NaN</span>)) <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;1ab&#x27;</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">false</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">true</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>其中为<code>NaN</code>的数值分别有<code>undefined</code>、<code>null</code>、<code>&#39;1ab&#39;</code><br><code>null</code>表示”没有对象”，即该处不应该有值。 <code>undefined</code>表示”缺少值”，就是此处应该有一个值，但是还没有定义。<br>而<code>&#39;1ab&#39;</code>为<code>NaN</code>是因为字符串转换中出现了非数字的就会转换成<code>NaN</code></p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>假如我们现在有下面这么一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果用<code>Number()</code>去取值的时候就会调用到<code>valueOf()</code>方法，此时会返回 1 ，但如果改写 <code>valueOf() &#123; return &#123;&#125; &#125; </code>的话就会去调用 <code>toString()</code>， 此时返回 2<br>所以<code>Number(引用类型)</code>的逻辑过程就是：<br><img src="http://oss.snailuu.cn/picgo/1723990372349-1a87f168-e29b-468c-b7f8-785c797a4878.jpeg"></p><h3 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h3><p><code>String()</code>就是跟<code>Number()</code>相反，先调用<code>toString()</code>然后再看<code>valueOf()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(obj)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(&#123;&#125;)); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure><p><strong>3 &lt; 2 &lt; 1 和 2 &lt; 1 &lt; 1</strong><br>两个输出都是<code>true</code>，第一个符合数学公式，第二个就涉及到隐式转换了</p><ol><li>比较 2 &lt; 1 结果为 fasle</li><li>现在就是 false &lt; 1 ，Number(false) 为 0</li><li>现在就是 0 &lt; 1， 结果为 true</li></ol><h1 id="三、隐式转换规则"><a href="#三、隐式转换规则" class="headerlink" title="三、隐式转换规则"></a>三、隐式转换规则</h1><h2 id="boolean-隐式转换触发"><a href="#boolean-隐式转换触发" class="headerlink" title="boolean 隐式转换触发"></a>boolean 隐式转换触发</h2><ol><li>if</li><li>switch</li><li>while</li><li>for(;;)</li><li>&amp;&amp;</li><li>||</li><li>!</li><li>!!</li><li>? : 三元运算</li></ol><h2 id="number-隐式转换触发"><a href="#number-隐式转换触发" class="headerlink" title="number 隐式转换触发"></a>number 隐式转换触发</h2><p>用到数字运算符的地方都会进行转换：<code>+ - * / == ~~ &amp; | ~ ^ &lt;&lt; &lt;&lt;&lt;</code></p><h2 id="string-隐式转换触发"><a href="#string-隐式转换触发" class="headerlink" title="string 隐式转换触发"></a>string 隐式转换触发</h2><p><code>+</code> 且两边大于等于 1 个<code>string</code>类型. 除了有 <code>symbol</code>类型之外</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="string">&#x27;2&#x27;</span> + <span class="string">&#x27;2&#x27;</span>); <span class="comment">// &#x27;122&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + +<span class="string">&#x27;2&#x27;</span> + <span class="string">&#x27;2&#x27;</span>); <span class="comment">// &#x27;32&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;B&#x27;</span> + <span class="string">&#x27;2&#x27;</span>); <span class="comment">// &#x27;NaN2&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;B&#x27;</span> + <span class="number">2</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><ol><li>用 + 包裹，全部就转换为字符串后相加操作</li><li>+’2’ 会先进行 number 转换，变成 1 + 2 &#x3D; 3，然后遇到 + 在进行 string 转换</li><li>‘A’ - ‘B’ 会先进行 number 转换，变成 NaN，然后 string 转换</li><li>同上</li></ol><h1 id="四、需要注意的点"><a href="#四、需要注意的点" class="headerlink" title="四、需要注意的点"></a>四、需要注意的点</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">123</span>).<span class="title function_">toString</span>()); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>.<span class="title function_">toString</span>()); <span class="comment">// 报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>.<span class="title function_">toString</span>()); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>undefined</code>和<code>null</code>并没有包装类,它们是基础类型,所以没有<code>toString()</code>方法</p><h1 id="五、面试题"><a href="#五、面试题" class="headerlink" title="五、面试题"></a>五、面试题</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] == ![]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol><li>一看到 <code>==</code> 就会想到两边会进行 <code>Number</code>转换</li><li><code>Number([])</code> 会调用到 <code>Array.prototype.toSting() </code>，得到的是一个空字符串 <code>&#39;&#39;</code> ，用<code>Number</code>转换后就会变成 0</li><li>右边 <code>![] </code>会先进行 <code>Boolean</code> 转换，<code>[]</code> 不是 <code>falsey</code>，所以<code>Boolean([]) </code>为 <code>true</code></li><li><code>!true</code> 再进行<code>Numebr</code> 转换就会变成 0</li><li>所以最终就是<code>0 == 0</code>，结果为 true</li></ol><h1 id="六、奇奇怪怪的题目"><a href="#六、奇奇怪怪的题目" class="headerlink" title="六、奇奇怪怪的题目"></a>六、奇奇怪怪的题目</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">66.</span><span class="title function_">toString</span>() <span class="comment">// 报错: Invalid or unexpected token</span></span><br><span class="line"><span class="number">66.</span>.<span class="title function_">toString</span>() <span class="comment">// &#x27;66&#x27;</span></span><br><span class="line"><span class="number">66.6</span>.<span class="title function_">toString</span>() <span class="comment">// &#x27;66.6&#x27;</span></span><br><span class="line"><span class="number">66.</span>..<span class="title function_">toString</span>() <span class="comment">// 报错: Unexpected token &#x27;.&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我是如何一步一步实现一个伪select功能的实现的？</title>
      <link href="/p/b5c0032b/"/>
      <url>/p/b5c0032b/</url>
      
        <content type="html"><![CDATA[<h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>大概效果就是这样子，点击某个范围内的元素有会有一个状态（这里是一个列表出现的效果），然后在点击非这个区域范围的话就会变成另外一个状态（列表消失）<br><img src="http://oss.snailuu.cn/picgo/1720710249126-294f8bb0-b6d4-485d-b59c-8e6b55e7f378.gif" alt="GIF.gif"></p><h1 id="🎈-曲折的过程"><a href="#🎈-曲折的过程" class="headerlink" title="🎈 曲折的过程"></a>🎈 曲折的过程</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>将上面的效果再次解析就是：在 A 元素上，点击它本身是一种状态（比如更换背景色为蓝色），点击外部的又是另外一个状态（背景色变成红色）<br>做法就可以在 A 元素直接绑定 click 事件，还要阻止冒泡（这里为什么需要阻止冒泡呢？<br><img src="http://oss.snailuu.cn/picgo/1720711155918-79561738-44f6-49a9-85a6-c7451a40ba74.gif" alt="GIF.gif"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetDiv</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;targetDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> targetDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#targetDiv&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">targetDiv.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">event.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">targetDiv.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;blue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">targetDiv.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>事件冒泡：事件从触发事件的目标元素开始，逐级向上级冒泡到 DOM 树的根节点<br>在这里就会从#test -&gt; body -&gt; html -&gt; document<br>这样子又会导致触发下面那个事件方法将他背景设置为红色，因此会看不到变成蓝色</p></blockquote><h2 id="取消冒泡呢"><a href="#取消冒泡呢" class="headerlink" title="取消冒泡呢"></a>取消冒泡呢</h2><p>在浏览器鼠标点击事件中有三个事件：<code>mousedown</code>、<code>mouseup</code>、<code>click</code><br><code>mousedown</code>：按下鼠标按键（左、右键均可）不需要松开<br><code>mouseup</code>：松开鼠标按键（左、右键均可）<br><code>click</code>：按下并松开鼠标左键<br>在触发顺序上：</p><ul><li>若在同一个元素上<strong>按下并松开鼠标左键</strong>，会依次触发<code>mousedown</code>、<code>mouseup</code>、<code>click</code>，前一个事件执行完毕才会执行下一个事件</li><li>若在同一个元素上<strong>按下并松开鼠标右键</strong>，会依次触发<code>mousedown</code>、<code>mouseup</code>，前一个事件执行完毕才会执行下一个事件，不会触发 click 事件</li></ul><p>因此可以同使用<code>mousedown</code>来替代<code>click</code>事件，但此时还需要知道的就是：我点击的是否在某个元素的元素里面（也可以理解为是否为目标元素的子孙元素）呢？<br><code>elementA.contains(elementB)</code>：如果 elementB 是不是 elementA 的后代元素，包括本身，返回<code>true</code> or <code>false</code><br>所以可以将上面的代码改造成下面这样子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetDiv</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;targetDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> targetDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;targetDiv&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(targetDiv);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用 mousedown 事件替代 click 事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (targetDiv.<span class="title function_">contains</span>(event.<span class="property">target</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 点击发生在目标div内部</span></span></span><br><span class="line"><span class="language-javascript">targetDiv.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;blue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 点击发生在目标div外部</span></span></span><br><span class="line"><span class="language-javascript">targetDiv.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>前面提到的都是使用 js 来进行操作，但有没有办法不使用 js 而是用 css 来实现，以此能提高性能呢？<br><code>:focus-within</code>：CSS 伪类表示当元素或其任意后代元素被聚焦时，将匹配该元素。换言之，它表示 :<code>focus</code> 伪类匹配到该元素自身或它的后代时，该伪类生效。<br>由于使用该伪类的时候需要聚焦，默认 div 是不会接收焦点的，加上 <code>tabindex=&quot;0&quot;</code>就可以接收焦点了。<br>效果如下：<br><img src="http://oss.snailuu.cn/picgo/1720712125176-23bdde4c-dc92-4b17-a24a-967647c9dea7.gif" alt="GIF.gif"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetDiv</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>: background-color <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetDiv</span><span class="selector-pseudo">:focus</span>-within &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;targetDiv&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">点击我或我的内部</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>内部按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="div-gt-input"><a href="#div-gt-input" class="headerlink" title="div -&gt; input"></a>div -&gt; input</h2><p>一般聚焦的话就是 <code>input</code> 输入框（语义不符），因此把上面提及的 <code>div</code> 更改为 <code>input</code>，再次实现类似的效果。<br>在这种情况下开始感觉到有股神秘力量把我拉到了之前画学校官网的时候，下拉列表的实现<br>当时是用的<code>:hover</code>也实现了类似的效果。<br><img src="http://oss.snailuu.cn/picgo/1720712502286-cd592add-81a1-4fd4-96bf-0b55e7143899.gif" alt="GIF.gif"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetInput</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>: background-color <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetInput</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetInput</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#innerButton</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;targetInput&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">&quot;点击我或悬停在我上面&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后神奇的是，手机端没有 鼠标 这个概念，但还是可以进行变色，原因就是 移动端的<code>hover</code>表现还是跟<code>focus</code>一样</p><h2 id="加入子列表"><a href="#加入子列表" class="headerlink" title="加入子列表"></a>加入子列表</h2><p>加入子列表之后看起来就是原生的 <code>select</code>组件 效果了<br><img src="http://oss.snailuu.cn/picgo/1720712780517-d7ee328e-04e7-4022-86a1-64fa60f40785.gif" alt="GIF.gif"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetInput</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>: background-color <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetInput</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetInput</span><span class="selector-pseudo">:focus</span> ~ <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#innerButton</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;targetInput&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">&quot;点击我&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子列表1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子列表2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子列表3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但此时又会出现问题，就是在移动端的时候会聚焦输入框，触发 软键盘</p><p><img src="http://oss.snailuu.cn/picgo/1720712863316-4e928420-3b00-4cec-ac22-d46ce3efd987.gif" alt="GIF.gif"><br>解决办法：加上 <code>readonly</code> 属性或者设置 <code>disabled</code> 属性<br>readonly：通过将输入框设置为只读，移动设备上的软键盘将不会弹出。 用户仍然可以通过其他方式复制、粘贴或选择文本。<br>disabled：通过将输入框禁用，移动设备上的软键盘将不会弹出，并且用户无法对其进行任何操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetInput</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transition</span>: background-color <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetInput</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#targetInput</span><span class="selector-pseudo">:focus</span> ~ <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#innerButton</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag"><span class="attr">read-only</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;targetInput&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">&quot;点击我或悬停在我上面&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子列表1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子列表2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子列表3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>在检测点击的是否是某个元素的时候可以使用 e.target 来进行获取，在此基础上也可以使用事件冒泡来做一个事件委托，达到性能提高的目的。</li><li>div 本身语义就不应该有聚焦，所以换成 input 更佳</li><li>在考虑页面效果的时候不止要 web 端，还得考虑其他可能的平台：比如移动端、客户端等的效果展示</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AI会就行了，我还要学正则表达式干嘛？</title>
      <link href="/p/c1679184/"/>
      <url>/p/c1679184/</url>
      
        <content type="html"><![CDATA[<p>现在 AI 都那么强大了我还为什么需要去学习<strong>正则表达式</strong>这个烦人的东西呢？<br>问 AI：打开浏览器 -&gt; 输入 chat.xxx.com -&gt; 登录 -&gt; 输入问题 -&gt;得到答案<br>靠自己 🧠： 输入问题 -&gt; 得到答案<br>简单明了可以看出来对于一些简单的东西如果掌握了，会大大减少得到问题答案的 ⏱</p><hr><blockquote><p>下面说明的表达式是运行在 javascript 环境下的<br>正则表达式只能处理字符串，懂了没，字符串！！！</p></blockquote><p>推荐使用 vscode 插件，可以在线测试正则表达式的匹配字符串<br><img src="http://oss.snailuu.cn/picgo/1719750461819-a26d3864-cc89-491c-8a82-a86ddc14198e.png" alt="image.png"></p><h1 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=&gt;字面量创建方式（两个斜杠之间包起来的，都是用来描述规则的元字符）</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d+/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt;构造函数模式创建  两个参数：元字符字符串，修饰符字符串</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\d+&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><p><img src="http://oss.snailuu.cn/picgo/1719752601529-4ff8fc7a-0d7d-4c10-8b22-6308874735a7.jpeg"></p><h2 id="量词元字符"><a href="#量词元字符" class="headerlink" title="量词元字符"></a>量词元字符</h2><blockquote><p>设置字符出现的次数</p></blockquote><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>任意次（包括 0 次）</td></tr><tr><td>+</td><td>至少出现一次</td></tr><tr><td>?</td><td>0 次或 1 次</td></tr><tr><td>{n}</td><td>出现 n 次</td></tr><tr><td>{n,}</td><td>至少出现 n 次</td></tr><tr><td>{n,m}</td><td>出现了 n~m 次</td></tr></tbody></table><h2 id="特殊元字符"><a href="#特殊元字符" class="headerlink" title="特殊元字符"></a>特殊元字符</h2><blockquote><p>单个或者组合再一起代表特殊的含义</p></blockquote><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>\</td><td>转义字符</td></tr><tr><td>.</td><td>除了 \n(换行符) 以外的任意字符</td></tr><tr><td>^</td><td>以哪个元字符作为开始</td></tr><tr><td>$</td><td>以哪个元字符作为结束</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\d</td><td>0~9 之间的一个数字</td></tr><tr><td>\D</td><td>非 0~9 之间的一个数字(大小写意思是相反)</td></tr><tr><td>\w</td><td>数字、字母、下划线中的任意一个字符</td></tr><tr><td>\s</td><td>一个空白字符（包含空格、制表符、换页符等）</td></tr><tr><td>\t</td><td>一个制表符（TAB 键：4 个字符）</td></tr><tr><td>\b</td><td>匹配一个单词的边界</td></tr><tr><td>x&amp;#124;y</td><td>x 或者 y 其中一个字符</td></tr><tr><td>[xyz]</td><td>x、y、z 其中一个字符</td></tr><tr><td>[^xy]</td><td>除了 x 和 y 以外的任意字符</td></tr><tr><td>[a-z]</td><td>指定 a~z 这个范围中的任意字符 [0-9a-zA-Z_]&#x3D;&#x3D;&#x3D;\w</td></tr><tr><td>[^a-z]</td><td>上一个的取反 “非”</td></tr><tr><td>()</td><td>分组符号 有点像作用域</td></tr><tr><td>(?:)</td><td>只匹配不捕获</td></tr><tr><td>(?&#x3D;)</td><td>正向预查</td></tr><tr><td>(?!)</td><td>逆向预查</td></tr></tbody></table><h2 id="普通元字符"><a href="#普通元字符" class="headerlink" title="普通元字符"></a>普通元字符</h2><blockquote><p>代表本身含义的，就是跟字符串一样的作用</p></blockquote><p><code>\snailuu\</code> 匹配的就是 <code>&quot;snailuu&quot;</code></p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>i -&gt; ignoreCase</td><td>忽略字符大小写</td></tr><tr><td>m -&gt; multiline</td><td>多行匹配</td></tr><tr><td>g -&gt; global</td><td>全局匹配</td></tr></tbody></table><h1 id="常见-x2F-遇到的正则表达"><a href="#常见-x2F-遇到的正则表达" class="headerlink" title="常见&#x2F;遇到的正则表达"></a>常见&#x2F;遇到的正则表达</h1><h2 id="有效数字"><a href="#有效数字" class="headerlink" title="有效数字"></a>有效数字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 规则分析</span></span><br><span class="line"><span class="comment"> * 1.可能出现 + - 号，也可能不出现  [+-]?</span></span><br><span class="line"><span class="comment"> * 2.一位0-9都可以，多位首位不能是0 (\d|([1-9]\d+))</span></span><br><span class="line"><span class="comment"> * 3.小数部分可能有可能没有，一旦有后面必须有小数点+数字 (\.\d+)?</span></span><br><span class="line"><span class="comment"> * 解析：</span></span><br><span class="line"><span class="comment"> * ^[+-]?             以+或者-开头0个或1个</span></span><br><span class="line"><span class="comment"> * (\d|([1-9]\d+))    第一位0-9或者第一位是1-9后面跟着多位0-9</span></span><br><span class="line"><span class="comment"> * (\.\d+)?           小数部分可能有可能没有，一旦有后面必须有小数点+数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[+-]?(\d|([1-9]\d+))(\.\d+)?$/</span>;</span><br></pre></td></tr></table></figure><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><blockquote><p>由数字+字母+下划线组成</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析</span></span><br><span class="line"><span class="comment"> * 数字、字母、下划线构成</span></span><br><span class="line"><span class="comment"> * 长度 6~16位</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\w&#123;6,16&#125;$/</span>;</span><br></pre></td></tr></table></figure><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * =&gt; \w+((-\w+)|(\.\w+))*</span></span><br><span class="line"><span class="comment"> * 1.开头是数字字母下划线（1到多位）</span></span><br><span class="line"><span class="comment"> * 2.还可以是 -数字字母下划线 或者 .数字字母下划线,整体零到多次</span></span><br><span class="line"><span class="comment"> * =&gt;邮箱的名字由“数字、字母、下划线、-、.”几部分组成，但是-/.不能连续出现也不能作为开始</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * =&gt; @[A-Za-z0-9]+</span></span><br><span class="line"><span class="comment"> * 1.@后面紧跟着：数字、字母 （1-多位）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * =&gt; ((\.|-)[A-Za-z0-9]+)*</span></span><br><span class="line"><span class="comment"> * 1.对@后面名字的补充</span></span><br><span class="line"><span class="comment"> * 多域名     .com.cn</span></span><br><span class="line"><span class="comment"> * 企业邮箱    hzf<span class="doctag">@snailuu</span>-snailuu-office.com</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * =&gt; \.[A-Za-z0-9]+</span></span><br><span class="line"><span class="comment"> * 1. 这个匹配的是最后的域名（.com/.cn/.org/.edu/.net...）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\w+((-\w+)|(\.\w+))*@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue笔记[二]-路由篇</title>
      <link href="/p/25bd8f08/"/>
      <url>/p/25bd8f08/</url>
      
        <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>官方文档：<a href="https://router.vuejs.org/zh/">vue-router</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm i vue-router</code>，默认安装的是最新版本（只支持 Vue3，Vue2 需要指定版本<code>vue-router@3</code>）</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>创建路由器</li><li>注册路由</li><li>使用路由</li><li>编写路由组件</li></ol><p>注意：</p><ol><li>不断切换路由时，路由组件在重复地销毁和挂载，即重复地经过完整的生命周期</li><li>vue-router 插件会向 vm 和 vc 身上添加 <code>$route</code>（当前路由） 和<code> $router</code>（全局路由器） 两个属性</li></ol><h2 id="创建路由器"><a href="#创建路由器" class="headerlink" title="创建路由器"></a>创建路由器</h2><p>在 src 目录下新建<code>router/index.js</code></p><p>使用<code>new VueRouter()</code>的方式来创建路由器实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>); <span class="comment">// 使用插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line">routes, <span class="comment">// 路由配置规则</span></span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>路由规则可以将其提取到当前文件夹的一个文件<code>routes.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Blog</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Blog&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Project</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Project&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有子路由的话，在每个对象中新增 children[] 属性即可，其中数字每一项也都是路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Blog&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/blog&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Blog</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Project&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/project&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Project</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Message&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/message&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="注册路由"><a href="#注册路由" class="headerlink" title="注册路由"></a>注册路由</h2><p>在实例化 Vue 对象的时候将创建好的路由器实例当作配置信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">router,</span><br><span class="line"><span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h2><p><strong>vue-router</strong>提供了特殊的标签来使用路由</p><p><code>&lt;router-link&gt;</code> 会自动读取当前的路由模式（hash&#x2F;history&#x2F;abstract），并将其自动解析成<code>&lt;a&gt;</code>标签</p><p><code>&lt;router-view&gt;</code> 将指定路由页面显示，如果在<code>&lt;router-view&gt;</code>里面还会使用到<code>&lt;router-view&gt;</code>，那里面的路由信息应该是外面的子路由</p><h2 id="编写路由组件"><a href="#编写路由组件" class="headerlink" title="编写路由组件"></a>编写路由组件</h2><p>一般将路由组件放到<code>src/views</code>中，声明某个路由地址对应某个页面</p><h1 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h1><p>路由模式决定了：</p><ol><li>路由从哪里获取访问路径</li><li>路由如何改变访问路径</li></ol><p><code>vue-router</code>提供了三种路由模式：</p><ol><li><p>hash：默认值。路由从浏览器地址栏中的 hash 部分获取路径，改变路径也是改变的 hash 部分。该模式兼容性最好。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/#/blog  --&gt;  /blog</span><br><span class="line">http://localhost:8081/about#/blog  --&gt; /blog</span><br></pre></td></tr></table></figure></li><li><p>history：路由从浏览器地址栏的<code>location.pathname</code>中获取路径，改变路径使用的 H5 的<code>history api</code>。该模式可以让地址栏最友好，但是需要浏览器支持<code>history api</code></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/#/blog  --&gt;  /</span><br><span class="line">http://localhost:8081/about#/blog  --&gt; /about</span><br><span class="line">http://localhost:8081/blog  --&gt; /blog</span><br></pre></td></tr></table></figure></li><li><p>abstract：路由从内存中获取路径，改变路径也只是改动内存中的值。这种模式通常应用到非浏览器环境中。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">内存： /--&gt;   /</span><br><span class="line">内存： /about--&gt; /about</span><br><span class="line">内存： /blog  --&gt; /blog</span><br></pre></td></tr></table></figure></li></ol><h1 id="无刷新跳转"><a href="#无刷新跳转" class="headerlink" title="无刷新跳转"></a>无刷新跳转</h1><p>在点击链接后页面刷新会做下面几件事情</p><ol><li>请求 index.html</li><li>请求各种 <code>*.js</code></li><li>请求各种 <code>*.css</code></li><li>执行 js</li><li>创建 vue 应用</li><li>渲染全部组件树</li><li>挂载到指定的 div 中</li></ol><p>但如果不刷新进行跳转：</p><ol><li>执行一段 js 代码：切换某个区域的组件</li></ol><p>普通点击跳转实现的是：<code>location.href=&#39;/&#39;</code></p><p>无刷新跳转实现的是：<code>history.pushState(null, null, &#39;/&#39;)</code></p><p>将原本的 a 标签改写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路径匹配样式"><a href="#路径匹配样式" class="headerlink" title="路径匹配样式"></a>路径匹配样式</h2><p>默认情况下，<code>vue-router</code>会用 <strong>当前路径</strong> 匹配 <strong>导航路径</strong> ：</p><ul><li>如果当前路径是以导航路径开头，则算作匹配，会为导航的 a 元素添加类名<code>router-link-active</code></li><li>如果当前路径完全等于导航路径，则算作精确匹配，会为导航的 a 元素添加类名<code>router-link-exact-active</code></li></ul><p>可以为组件<code>RouterLink</code>添加 bool 属性<code>exact</code>，将匹配规则改为：必须要精确匹配才能添加匹配类名<code>router-link-active</code></p><p>另外，可以通过<code>active-class</code>属性更改匹配的类名，通过<code>exact-active-class</code>更改精确匹配的类名</p><h1 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h1><p>使用命名路由可以解除系统与路径之间的耦合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>: [</span><br><span class="line"><span class="comment">// 路由规则</span></span><br><span class="line"><span class="comment">// 当匹配到路径 /foo 时，渲染 Foo 组件</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Foo</span> &#125;,</span><br><span class="line"><span class="comment">// 当匹配到路径 /bar 时，渲染 Bar 组件</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/bar&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Bar</span> &#125;,</span><br><span class="line">],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 向to属性传递路由信息对象 RouterLink会根据你传递的信息以及路由配置生成对应的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RouterLink</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name:&#x27;foo&#x27; &#125;&quot;</span>&gt;</span>go to foo<span class="tag">&lt;/<span class="name">RouterLink</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用vue-cli创建第一个应用</title>
      <link href="/p/602f60dc/"/>
      <url>/p/602f60dc/</url>
      
        <content type="html"><![CDATA[<p>可能涉及文档：</p><p><a href="https://cli.vuejs.org/zh/">vue-cli</a></p><p><a href="https://nodejs.org/zh-cn">node.js</a></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ol><li>node.js ：12.22.12</li><li>npm：6.14.18</li><li>vue&#x2F;cli：5.0.8</li><li>编译器： vscode</li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="说明名称"><a href="#说明名称" class="headerlink" title="说明名称"></a>说明名称</h2><p>用 vscode 打开一个文件夹，在终端命令行输入 <code>vue create [项目名称]</code> 来进行项目的创建</p><h2 id="vue-版本"><a href="#vue-版本" class="headerlink" title="vue 版本"></a>vue 版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vue create <span class="built_in">test</span></span></span><br><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Default ([Vue 3] babel, eslint)</span></span><br><span class="line">  Default ([Vue 2] babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><p>剩下配置信息根据自己需求自行添加，也可以直接选择第一个或者第二个选项默认安装</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>等项目创建完成之后，在命令行输入<code>npm run serve</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DONE  Compiled successfully in 4136ms                                                                       21:31:03</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http://localhost:8080/</span><br><span class="line"> - Network: http://192.168.1.102:8080/</span><br><span class="line"></span><br><span class="line"> Note that the development build is not optimized.</span><br><span class="line"> To create a production build, run npm run build.</span><br></pre></td></tr></table></figure><p>出现类似的提示就可以打开<code>http://localhost:8080/</code> 或者 <code>http://192.168.1.102:8080/</code> 看到我们创建的项目（页面是官方默认的样式）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue笔记[一]-开始</title>
      <link href="/p/9455ba8b/"/>
      <url>/p/9455ba8b/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://cn.vuejs.org/">Vue</a>一款<strong>用于构建用户界面</strong>的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套<strong>声明式</strong>的、<strong>组件化</strong>的<strong>编程模型</strong>，帮助你高效地<strong>开发用户界面</strong>。无论是简单还是复杂的界面，Vue 都可以胜任。</p><p>构建用户名界面：在合适的时刻将数据应用到合适的位置</p><p>渐进式： <strong>Vue</strong>可以自底向上逐层的应用，即需要什么用什么，可以只用一个 vue 核心库，也可以装一堆插件库</p><blockquote><p>Vue 特点：</p><ol><li><strong>组件化</strong>模式，提高代码复用率，让代码更好维护</li><li><strong>声明式</strong>编码，无需直接操作 DOM，提高开发效率</li><li><strong>响应性</strong>，Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM</li><li>使用<strong>虚拟 DOM</strong>和优秀的<strong>Diff 算法</strong>，尽量复用 DOM 节点</li></ol></blockquote><h1 id="引入与挂载"><a href="#引入与挂载" class="headerlink" title="引入与挂载"></a>引入与挂载</h1><p>引入的方式有两种，通过 cdn 或者本地文件引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.chuckle.top/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>使用步骤：</p><ol><li>创建 Vue 实例（引入文件后就多了一个<code>Vue</code>的全局构造函数）</li><li>挂载到某个<code>dom</code>节点上</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 这里通过引入cdn来创建Vue实例</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag"><span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;snailuu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><p>Vue 有两种模板语法：</p><ol><li>插值语法：<code>&#123;&#123;&#125;&#125;</code></li><li>指令语法：<code>v-</code></li></ol><p>插值语法用于<strong>标签体内容</strong></p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>常见的有<code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>、<code>v-for</code>、<code>v-bind</code></p><p>在<code>v-bind</code>中， <code>style</code>较为特殊，属性值采用<strong>对象</strong>写法，<code>class</code>同理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img</span><br><span class="line">    :style=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    width: size + &#x27;px&#x27;,</span></span><br><span class="line"><span class="string">        height:size + &#x27;px&#x27;</span></span><br><span class="line"><span class="string">    &#125;&quot;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h1><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><ul><li><p>数组写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>];</span><br></pre></td></tr></table></figure></li><li><p>对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;snailuu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>父组件调用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">&quot;snailuu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：子组件不能改动父组件传递的数据信息</p></blockquote><h2 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h2><p>通过<code>vue.$emit</code>来向父组件发出事件通知</p><p>子组件通过<code>vue.$emit(&quot;事件名称&quot;, &quot;事件参数&quot;)</code>向父组件发出通知，父组件通过<code>&lt;App @事件名称=&quot;处理函数&quot;&gt;</code>来进行处理</p><blockquote><p>抛出事件：子组件在某个时候发生了一件事，但自身无法处理，于是通过事件的方式通知父组件处理</p><p>事件参数：子组件抛出事件时，传递给父组件的数据</p><p>注册事件：父组件申明，当子组件发生某件事的时候，自身将做出一些处理</p></blockquote><h1 id="结构说明"><a href="#结构说明" class="headerlink" title="结构说明"></a>结构说明</h1><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>存放一些 html 代码，用于构建虚拟 dom 树</p><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>加了 scoped 字段，vue 会自动在该组件内类名后面加上一段哈希值来保证唯一（调用不同组件的相同类名会保证不同，以此隔绝不同的组件）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="selector-class">.avatar-img</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>计算属性从代码层度看很想一个方法&#x2F;函数，但不同于方法&#x2F;函数的地方在于计算属性会基于其响应式依赖被缓存，也就是需要<strong>被计算的属性</strong>（<code>return</code>包含的属性）如果没发生改变的话，后面不断调用的话就直接返回缓存内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>: <span class="string">&#x27;Doe&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"><span class="attr">fullName</span>: &#123;</span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line"><span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line"><span class="comment">// 注意：我们这里使用的是解构赋值语法</span></span><br><span class="line">[<span class="variable language_">this</span>.<span class="property">firstName</span>, <span class="variable language_">this</span>.<span class="property">lastName</span>] = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h1><p>在 css 中可以用类似 js 中的导入文件方式导入样式文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// <span class="selector-tag">var</span><span class="selector-class">.less</span></span><br><span class="line"><span class="keyword">@danger</span>: #cc3600; // 危险、错误</span><br><span class="line"><span class="keyword">@primary</span>: #<span class="number">6</span>b9eee; // 主色调、链接</span><br><span class="line"><span class="keyword">@words</span>: #<span class="number">373737</span>; // 大部分文字、深色文字</span><br><span class="line"><span class="keyword">@lightWords</span>: #<span class="number">999</span>; // 少部分文字、浅色文字</span><br><span class="line"><span class="keyword">@warn</span>: #dc6a12; // 警告</span><br><span class="line"><span class="keyword">@success</span>: #<span class="number">7</span>ebf50; // 成功</span><br><span class="line"><span class="keyword">@gray</span>: #b4b8bc; // 灰色</span><br><span class="line"><span class="keyword">@dark</span>: #<span class="number">202020</span>; // 深色</span><br><span class="line"></span><br><span class="line">// gloabal<span class="selector-class">.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./var.less&#x27;</span>;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: @words;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;-apple-system&#x27;</span>, <span class="string">&#x27;BlinkMacSystemFont&#x27;</span>, <span class="string">&#x27;Roboto&#x27;</span>, <span class="string">&#x27;Helvetica Neue&#x27;</span>, <span class="string">&#x27;微软雅黑&#x27;</span>,</span><br><span class="line">sans-serif;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: inherit;</span><br><span class="line"></span><br><span class="line">&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: @primary;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>vue</code>中可以使用<code>~@</code>来返回到 src<code>目录</code></p><h1 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a>v-if 和 v-show</h1><p>两个都是控制 dom 元素是否显示，区别：</p><ol><li>v-if 还有分支 —&gt; v-else-if、v-else</li><li>v-if 会把 dom 真实增添和删除</li><li>v-show 始终会生成 dom 元素，而是通过控制 dom 元素的<code>css:display=none;</code>隐藏</li></ol><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>有时候父组件要在子组件的某个区域中再增加新的内容，用插槽可以将内容插入到指定区域</p><p>默认插槽只要在子组件声明<code>&lt;slot&gt;</code>区域，但这样只会到一个区域中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- message组件：一个弹窗消息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slot是vue的内置组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件App --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>App Message<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Message</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最终的结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>App Message<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="http://oss.snailuu.cn/picgo/20201202152326.png" alt="image-20201202152326210" style="zoom:40%;" /><p>也可以使用<strong>具名插槽</strong>来指定某个内容在某个区域，在子组件的<code>&lt;slot name=&quot;插槽名&quot;&gt;</code>，声明一个唯一的插槽名，在父组件就可以通过<code>v-slot:插槽名</code>来将内容插入到指定的槽中，也可以将<code>v-slot:插槽名</code> 简写成：<code>#插槽名</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Layout 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把页头放这里，提供插槽，名为header --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把主要内容放这里，提供插槽，名为default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把页脚放这里，提供插槽，名为footer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件App --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BaseLayout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BaseLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="http://oss.snailuu.cn/picgo/20201202153229.png" alt="image-20201202153229391" style="zoom:50%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端表格数据的两种分页方式</title>
      <link href="/p/57f9cd67/"/>
      <url>/p/57f9cd67/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ol><li>编译器：vscode</li><li>开发框架：vue3</li><li>ui 库：element-ui-plus</li></ol><h1 id="采用组件"><a href="#采用组件" class="headerlink" title="采用组件"></a>采用组件</h1><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag"><span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">stripe</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag"><span class="attr">prop</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">label</span>=<span class="string">&quot;Date&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag"><span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">label</span>=<span class="string">&quot;Name&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag"><span class="attr">prop</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">label</span>=<span class="string">&quot;Address&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tableData = [</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">];</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pagination"><a href="#pagination" class="headerlink" title="pagination"></a>pagination</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-model:current-page</span>=<span class="string">&quot;currentPage&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-model:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">:page-sizes</span>=<span class="string">&quot;[100, 200, 300, 400]&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> total = <span class="title function_">ref</span>(tableData.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> currentPage = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pageSize = <span class="title function_">ref</span>(<span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="方法-1：直接向后端分页请求数据"><a href="#方法-1：直接向后端分页请求数据" class="headerlink" title="方法 1：直接向后端分页请求数据"></a>方法 1：直接向后端分页请求数据</h1><p>这里需要后端写好一个分页接口。向后端携带这样的请求体即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">queryParams</span>: &#123;</span><br><span class="line">    <span class="attr">pageNum</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在代码部分，只需要更改监听<code>&lt;el-pagination/&gt;</code>组件的<code>currentPage</code>和<code>pageSize</code>发生变化时就再次向后端请求接口，再对返回数据再次重新渲染。</p><h1 id="方法-2：前端自行做分割"><a href="#方法-2：前端自行做分割" class="headerlink" title="方法 2：前端自行做分割"></a>方法 2：前端自行做分割</h1><p>在这种情况下就是适用于下面这些情景：</p><ol><li>一次性向后端请求全部数据</li><li>需要不断向后端请求请数据，然后添加已有数据末尾</li></ol><p>首先，需要改写表格所展示的数据，这里不再直接将整个数组进行展示，而是将数据进行切片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData.slice((currentPage-1)*pageSize,currentPage*pageSize)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>tableData</code> 为数据数组，<code>currentPage</code> 当前在第几页的数据，<code>pageSize</code> 当前一页展示的数据量</p></blockquote><p>在<code>&lt;script setup&gt;&lt;/scrip&gt;</code> 里面同样对<code>handleSizeChange</code>和<code>handleCurrentChange</code> 两个方法进行定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> total = <span class="title function_">ref</span>(tableData.<span class="property">length</span>)</span><br><span class="line"><span class="keyword">const</span> currentPage = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> pageSize = <span class="title function_">ref</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//每页条数改变时触发 选择一页显示多少行</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleSizeChange</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="line">      currentPage.<span class="property">value</span> = <span class="number">1</span>;</span><br><span class="line">      pageSize.<span class="property">value</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//当前页改变时触发 跳转其他页</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleCurrentChange</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">      currentPage.<span class="property">value</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>element-ui-plus组件英文改中文</title>
      <link href="/p/8188b603/"/>
      <url>/p/8188b603/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天在 vue3 的项目中使用到了 element-ui-plus，在调用组件的时候发现渲染出来的默认都是英文版，对于我来说主要还是中文为主（还是因为英语太烂了。</p></blockquote><h2 id="方法-1：-全局引入"><a href="#方法-1：-全局引入" class="headerlink" title="方法 1： 全局引入"></a>方法 1： 全局引入</h2><p>在<code>main.js</code>文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//怎么按需修改中文</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">&#x27;element-plus/lib/locale/lang/zh-cn&#x27;</span>; <span class="comment">//需要新加的代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>, &#123; locale &#125;); <span class="comment">//需要改变的地方，加入locale</span></span><br></pre></td></tr></table></figure><h2 id="方法-2：按需引入"><a href="#方法-2：按需引入" class="headerlink" title="方法 2：按需引入"></a>方法 2：按需引入</h2><p>在某个组件中修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-pagination</span><br><span class="line">:locale=&quot;locale&quot;</span><br><span class="line">background</span><br><span class="line">@size-change=&quot;handleSizeChange&quot;</span><br><span class="line">@current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">:current-page=&quot;currentPage4&quot;</span><br><span class="line">:page-sizes=&quot;[20, 50, 100, 200]&quot;</span><br><span class="line">:page-size=&quot;20&quot;</span><br><span class="line">layout=&quot;-&gt;,total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">:total=&quot;total&quot;&gt;</span><br><span class="line">&lt;/el-pagination&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ElConfigProvider &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">import zhCn from &#x27;element-plus/lib/locale/lang/zh-cn&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; locale &#125; = reactive(&#123;</span><br><span class="line">locale: zhCn,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【前端知识文档集】标准库</title>
      <link href="/p/c05caf28/"/>
      <url>/p/c05caf28/</url>
      
        <content type="html"><![CDATA[<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>如果尝试着把原始类型（number、string、boolean）当做对象使用，JS 会自动将其转换为对应包装类的实例</p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN">Number.NaN</a></td><td>表示一个数学上并不存在的数字</td><td>可以直接书写为<code>NaN</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN">Number.isNaN()</a></td><td>判断传入的值是否是 NaN</td><td>可以直接书写为<code>isNaN</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger">Number.isInteger()</a></td><td>判断传入的值是否是整数</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt">Number.parseInt()</a></td><td>把传入的值转换为整数形式返回</td><td>可以直接书写为<code>parseInt()</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat">Number.parseFloat()</a></td><td>把传入的值转换为小数形式返回</td><td>可以直接书写为<code>parseFloat()</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">Number.prototype.toFixed()</a></td><td>将当前数字保留指定位数的小数返回</td><td>传入小数位数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/tostring">Number.prototype.toString()</a></td><td>将当前数字转换为字符串返回</td><td>传入进制 2-36</td></tr></tbody></table><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode">String.fromCharCode()</a></td><td>根据编码值得到一个字符</td><td>传入一个或多个编码值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length">String.prototype.length</a></td><td>得到字符串的长度</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt">String.prototype.charCodeAt()</a></td><td>得到某个下标的字符编码</td><td>传入下标</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes">String.prototype.includes()</a></td><td>判断当前字符串是否包含某个子串</td><td>传入子串</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">String.prototype.indexOf()</a></td><td>判断某个字符串在当前字符串中的第一个下标位置</td><td>如果没有，返回-1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf">String.prototype.lastIndexOf()</a></td><td>判断某个字符串在当前字符串中的最后一个下标位置</td><td>如果没有，返回-1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith">String.prototype.endsWith()</a></td><td>判断某个字符串是否以指定的字符串结束</td><td>传入一个字符串</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith">String.prototype.startsWith()</a></td><td>判断某个字符串是否以指定的字符串开始</td><td>传入一个字符串</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart">String.prototype.padStart()</a></td><td>将当前的字符串按照指定的字符在字符串开始位置填充到指定的位数，返回填充后的字符串</td><td>传入位数、填充字符</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd">String.prototype.padEnd()</a></td><td>将当前的字符串按照指定的字符在字符串结束位置填充到指定的位数，返回填充后的字符串</td><td>传入位数、填充字符</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split">String.prototype.split()</a></td><td>把当前字符串按照某个字符串分割成一个字符串数组返回</td><td>传入分隔符</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring">String.prototype.substring()</a></td><td>返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集</td><td>传入开始字符、结束字符</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim">String.prototype.trim()</a></td><td>从字符串的两端删除空白字符，返回新字符串</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart">String.prototype.trimStart()</a></td><td>从字符串的开头删除空白字符，返回新字符串</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd">String.prototype.trimEnd()</a></td><td>从字符串的末端删除空白字符，返回新字符串</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">String.prototype.toUpperCase()</a></td><td>将调用该方法的字符串转为大写形式并返回</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase">String.prototype.toLowerCase()</a></td><td>将调用该方法的字符串转为小写形式并返回</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">String.prototype.replace()</a></td><td>替换字符串中的第一个对应字符为新字符</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replaceall">String.prototype.replaceAll()</a></td><td>替换字符串中的所有对应字符为新字符</td><td></td></tr></tbody></table><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI">Math.PI</a></td><td>得到圆周率 π</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/abs">Math.abs()</a></td><td>求某个数绝对值</td><td>传入一个数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil">Math.ceil()</a></td><td>向上取整</td><td>传入一个数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor">Math.floor()</a></td><td>向下取整</td><td>传入一个数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max">Math.max()</a></td><td>求一个数列中的最大值</td><td>把数列依次传入</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min">Math.min()</a></td><td>求一个数列中的最小值</td><td>把数列依次传入</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random">Math.random()</a></td><td>得到一个 0-1 之间的随机小数</td><td>无参；无法取到 1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round">Math.round()</a></td><td>返回四舍五入的结果</td><td>传入一个数</td></tr></tbody></table><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><h3 id="时间基础知识"><a href="#时间基础知识" class="headerlink" title="时间基础知识"></a>时间基础知识</h3><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><table><thead><tr><th>单位</th><th>名称</th><th>换算</th></tr></thead><tbody><tr><td>hour</td><td>小时</td><td>1 day &#x3D; 24 hours</td></tr><tr><td>minute</td><td>分钟</td><td>1 hour &#x3D; 60 minutes</td></tr><tr><td>second</td><td>秒</td><td>1 minute &#x3D; 60 seconds</td></tr><tr><td>millisecond （ms）</td><td>毫秒</td><td>1 second &#x3D; 1000 ms</td></tr><tr><td>nanosecond （ns）</td><td>纳秒</td><td>1 ms &#x3D; 1000 ns</td></tr></tbody></table><h4 id="GMT-和-UTC"><a href="#GMT-和-UTC" class="headerlink" title="GMT 和 UTC"></a>GMT 和 UTC</h4><p>世界划分为 24 个时区，北京在东 8 区，格林威治在 0 时区。</p><p><img src="https://oss.snailuu.cn/article/center/2019-07-02-11-14-46.png" alt="时区"></p><p><strong>GMT</strong>：Greenwish Mean Time 格林威治世界时。太阳时，精确到毫秒。</p><p><strong>UTC</strong>：Universal Time Coodinated 世界协调时。以原子时间为计时标准，精确到纳秒。</p><blockquote><p>国际标准中，已全面使用 UTC 时间，而不再使用 GMT 时间</p></blockquote><p>GMT 和 UTC 时间在文本表示格式上是一致的，均为<code>星期缩写, 日期 月份 年份 时间 GMT</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thu, 27 Aug 2020 08:01:44 GMT</span><br></pre></td></tr></table></figure><p>另外，ISO 8601 标准规定，建议使用以下方式表示时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YYYY-MM-DDTHH:mm:ss.msZ</span><br><span class="line">例如：</span><br><span class="line">2020-08-27T08:01:44.000Z</span><br></pre></td></tr></table></figure><p><strong>GMT、UTC、ISO 8601 都表示的是零时区的时间</strong></p><h4 id="Unix-时间戳"><a href="#Unix-时间戳" class="headerlink" title="Unix 时间戳"></a>Unix 时间戳</h4><blockquote><p>Unix 时间戳（Unix Timestamp）是 Unix 系统最早提出的概念</p></blockquote><p>它将 UTC 时间 1970 年 1 月 1 日凌晨作为起始时间，到指定时间经过的秒数（毫秒数）</p><h4 id="程序中的时间处理"><a href="#程序中的时间处理" class="headerlink" title="程序中的时间处理"></a>程序中的时间处理</h4><p><strong>程序对时间的计算、存储务必使用 UTC 时间，或者时间戳</strong></p><p><strong>在和用户交互时，将 UTC 时间或时间戳转换为更加友好的文本</strong></p><img src="https://oss.snailuu.cn/article/center/anzhiyu.png" alt="image-20200827163636508" style="zoom:50%;" /><p>思考下面的问题：</p><ol><li>用户的生日是本地时间还是 UTC 时间？</li><li>如果要比较两个日期的大小，是比较本地时间还是比较 UTC 时间？</li><li>如果要显示文章的发布日期，是显示本地时间还是显示 UTC 时间？</li><li><code>北京时间2020-8-28 10:00:00</code>和<code>格林威治2020-8-28 02:00:00</code>，两个时间哪个大，哪个小？</li><li><code>北京的时间戳为0</code>和<code>格林威治的时间戳为0</code>，它们的时间一样吗？</li><li>一个中国用户注册时填写的生日是<code>1970-1-1</code>，它出生的 UTC 时间是多少？时间戳是多少？</li></ol><h3 id="日期-API"><a href="#日期-API" class="headerlink" title="日期 API"></a>日期 API</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date</a></p><p>构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 得到一个当前日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(value); <span class="comment">// 根据时间戳得到一个日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(dateString); <span class="comment">// 根据一个标准日期字符串得到一个日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]); <span class="comment">// 根据年、月、日、小时、分钟、秒、毫秒得到一个日期对象</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/now">Date.now()</a></td><td>得到当前时间戳</td><td>无参</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear">Date.prototype.getFullYear()</a></td><td>得到年</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth">Date.prototype.getMonth()</a></td><td>得到月</td><td>无参；本地时间；范围 0-11</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate">Date.prototype.getDate()</a></td><td>得到日</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours">Date.prototype.getHours()</a></td><td>得到小时</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes">Date.prototype.getMinutes()</a></td><td>得到分钟</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds">Date.prototype.getSeconds()</a></td><td>得到秒</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds">Date.prototype.getMilliseconds()</a></td><td>得到毫秒</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString">Date.prototype.toLocaleString()</a></td><td>得到日期本地的表示方式</td><td></td></tr></tbody></table><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign()</a></td><td>将多个对象的属性混合到一起</td><td>后面覆盖前面</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf">Object.getPrototypeOf()</a></td><td>获取一个对象的隐式原型</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf()</a></td><td>设置一个对象的隐式原型</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create()</a></td><td>创建一个新对象，同时设置新对象的隐式原型</td><td></td></tr></tbody></table><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">Array.prototype.concat()</a></td><td>把多个数组拼接成一个</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">Array.prototype.includes()</a></td><td>判断数组中是否包含某个值</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">Array.prototype.indexOf()</a></td><td>得到数组中某个值的第一个下标</td><td>若不存在则返回-1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf">Array.prototype.lastIndexOf()</a></td><td>得到数组中某个值的最后一个下标</td><td>若不存在则返回-1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join">Array.prototype.join()</a></td><td>把数组中每一项使用某个字符连接起来，形成一个字符串返回</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array.prototype.push()</a></td><td>向数组的末尾添加一项</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">Array.prototype.unshift()</a></td><td>向数组的开头添加一项</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop">Array.prototype.pop()</a></td><td>删除数组最后一项</td><td>返回被删除的值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift">Array.prototype.shift()</a></td><td>删除数组第一项</td><td>返回被删除的值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a></td><td>删除、修改、插入任何位置的值</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">Array.prototype.reverse()</a></td><td>将数组中的元素顺序颠倒</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort()</a></td><td>对数组进行排序</td><td>传入比较函数：0-位置不变，&lt;0-前者在前，&gt;0-前者在后</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">Array.prototype.slice()</a></td><td>对数组进行切割</td><td></td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply()</a></td><td>执行函数，绑定 this</td><td>参数列表以数组的形式传递</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call()</a></td><td>执行函数，绑定 this</td><td>参数列表依次传递</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>grid布局</title>
      <link href="/p/982491e9/"/>
      <url>/p/982491e9/</url>
      
        <content type="html"><![CDATA[<h1 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h1><ol><li><code>grid-template-columns</code>： 列宽</li><li><code>grid-template-rows</code>：行宽</li><li><code>repeat()</code>：简化重复的值</li><li><code>auto-fill</code>：自动填充</li><li><code>fr</code>：可用空间的一等分</li><li><code>minmax()</code>：长度范围</li><li>间距<ul><li><code>grid-row-gap</code>：行间距</li><li><code>grid-column-gap</code>：列间距</li><li><code>grip-gap</code>：行间距 列间距<blockquote><p><code>grid-row-gap</code>: 10px 表示行间距是 10px，<code>grid-column-gap</code>: 20px 表示列间距是 20px。<code>grid-gap</code>: 10px 20px 实现的效果是一样的</p></blockquote></li></ul></li><li><code>grid-template-areas</code>：定义区域</li><li><code>grid-area</code>：容器名称，配合<code>grid-template-areas</code>进行空间布局</li><li><code>grid-auto-flow</code>：自动布局，规定大小空间不足时会自动换行&#x2F;列<ul><li>先行后列：<code>grid-auto-flow:row</code>，配合<code>grid-template-colums</code>规定每列大小</li><li>先列后行：<code>grid-auto-flow:column</code>，配合<code>grid-template-colums</code>规定每行大小</li><li><code>grid-auto-flow: row dense</code>：不留空，尽量填满</li></ul></li><li><code>justify-items</code>：单元格内容的水平位置</li><li><code>aligh-items</code>：单元格的垂直位置</li><li><code>grid-column</code>；占据的列数范围，左闭右开（<code>grid-column: 1/3;</code> 占据[1,3)列）</li><li><code>grid-row</code>：占据行数范围</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实现svg描边动画</title>
      <link href="/p/135a1a4b/"/>
      <url>/p/135a1a4b/</url>
      
        <content type="html"><![CDATA[<h1 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h1><p><img src="https://oss.snailuu.cn/hexo/gif/2023070901.gif" alt="最终结果"><br>上面这个动画就是一个简单的<code>svg</code>描边动画的实现，下面来看看如何一步一步得到吧，</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>先用 svg 画出一条直线。<br><img src="https://oss.snailuu.cn/article/center/2023070902.png" alt="直线"></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.p</span> &#123;</span></span><br><span class="line"><span class="language-css">stroke: black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;icon&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">width</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">,<span class="attr">height</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;p&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">x1</span>=<span class="string">&quot;0%&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">y1</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">x2</span>=<span class="string">&quot;100%&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">y2</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;circle class=&#x27;p&#x27; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;30%&quot; /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>接着添加 <code>stroke-dasharray</code>和<code>stroke-width</code>样式，使得直线变粗以及有间隙</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">stroke: black;</span><br><span class="line"><span class="comment">/* 描边的宽度 */</span></span><br><span class="line">stroke-<span class="attribute">width</span>: <span class="number">10</span>;</span><br><span class="line"><span class="comment">/* 虚线间隔 */</span></span><br><span class="line">stroke-dasharray: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss.snailuu.cn/article/center/2023070903.png" alt="虚线"></p><ol start="3"><li><p>再添加一个<code>stroke-dashoffset</code>：偏移量，左正右负。<br><img src="https://oss.snailuu.cn/article/center/2023070904.png" alt="偏移"></p></li><li><p>有了上面这两个样式，就可以通过一个动画来实现线段的描边了。 - 先将虚线间隔调整为线段长度<br><code>css stroke-dasharray: 10; </code> - 将整条线左移整个宽<br><code>css stroke-dashoffset: 50; </code> - 添加一个动画并应用</p><pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">stroke: black;</span><br><span class="line">/_ 描边的宽度 _/</span><br><span class="line">stroke-<span class="attribute">width</span>: <span class="number">10</span>;</span><br><span class="line">/_ 虚线间隔 _/</span><br><span class="line">stroke-dasharray: <span class="number">50</span>;</span><br><span class="line">stroke-dashoffset: <span class="number">50</span>;</span><br><span class="line"><span class="attribute">animation</span>: stroke <span class="number">2s</span> forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">@keyframes</span> stroke &#123;</span><br><span class="line">            <span class="selector-tag">to</span> &#123;</span><br><span class="line">                stroke-dashoffset: <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ```</span><br><span class="line">        就可以得到这样子的动画</span><br><span class="line">        !<span class="selector-attr">[直线动画]</span>(https://oss.snailuu.cn/article/center/<span class="number">2023070905</span>.gif)</span><br><span class="line"></span><br><span class="line">&lt;center&gt;&lt;big&gt;以为这样子就结束了？no~ no~ no~😉&lt;/big&gt;&lt;/center&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li><li><p>由于上面的虚线长度和偏移量都是固定的，当<code>svg</code>图标长度发生变化时就不能自适应了，因此需要改成一个变量，这里采用<code>js</code>实现。</p><ul><li>先将长度都用变量表示<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">stroke: black;</span><br><span class="line"><span class="comment">/* 描边的宽度 */</span></span><br><span class="line">stroke-<span class="attribute">width</span>: <span class="number">10</span>;</span><br><span class="line"><span class="comment">/* 虚线间隔 */</span></span><br><span class="line">stroke-dasharray: <span class="built_in">var</span>(--l);</span><br><span class="line">stroke-dashoffset: <span class="built_in">var</span>(--l);</span><br><span class="line"><span class="attribute">animation</span>: stroke <span class="number">2s</span> forwards;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>加入<code>js</code>代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> paths = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.icon .p&quot;</span>);</span><br><span class="line">    paths.<span class="title function_">forEach</span>(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> len = path.<span class="title function_">getTotalLength</span>();</span><br><span class="line">        path.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--l&#x27;</span>, len + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">/*+1的目的是弥补精度*/</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最后将<code>&lt;line/&gt;</code> 换成其它的<code>svg代码</code></p></li></ol><figure class="highlight svg"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1688872979658&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1213 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;1041&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M1024 0c104.561778 0 189.62963 85.067852 189.62963 189.62963v644.74074c0 104.561778-85.067852 189.62963-189.62963 189.62963H900.740741a47.407407 47.407407 0 1 1 0-94.814815h123.259259c52.280889 0 94.814815-42.533926 94.814815-94.814815V189.62963c0-52.280889-42.533926-94.814815-94.814815-94.814815H189.62963c-52.280889 0-94.814815 42.533926-94.814815 94.814815v130.37037a47.407407 47.407407 0 1 1-94.814815 0V189.62963C0 85.067852 85.067852 0 189.62963 0zM878.231704 213.333333c67.309037 0 122.064593 54.755556 122.064592 122.064593V497.777778a47.407407 47.407407 0 1 1-94.814815 0V375.61837L766.160593 516.683852A188.397037 188.397037 0 0 1 791.703704 611.555556V834.37037c0 104.561778-85.067852 189.62963-189.62963 189.62963H189.62963C85.067852 1024 0 938.932148 0 834.37037V611.555556c0-104.561778 85.067852-189.62963 189.62963-189.62963h412.444444c35.678815 0 69.082074 9.91763 97.611852 27.117037L838.84563 308.148148H715.851852a47.407407 47.407407 0 1 1 0-94.814815zM602.074074 516.740741H189.62963c-52.280889 0-94.814815 42.533926-94.814815 94.814815V834.37037c0 52.280889 42.533926 94.814815 94.814815 94.814815h412.444444c52.280889 0 94.814815-42.533926 94.814815-94.814815V611.555556c0-52.280889-42.533926-94.814815-94.814815-94.814815z&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;1042&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>svg</code>标签的类增加一个<code>icon</code>，在<code>path</code>标签中增加一个<code>p</code>类，对于<code>p</code>类的样式增加一个<code>fill:none</code>的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">fill: none;</span><br><span class="line">stroke: black;</span><br><span class="line"><span class="comment">/* 描边的宽度 */</span></span><br><span class="line">stroke-<span class="attribute">width</span>: <span class="number">10</span>;</span><br><span class="line"><span class="comment">/* 虚线间隔 */</span></span><br><span class="line">stroke-dasharray: <span class="built_in">var</span>(--l);</span><br><span class="line">stroke-dashoffset: <span class="built_in">var</span>(--l);</span><br><span class="line"><span class="attribute">animation</span>: stroke <span class="number">2s</span> forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> stroke &#123;</span><br><span class="line"><span class="selector-tag">to</span> &#123;</span><br><span class="line">stroke-dashoffset: <span class="number">0</span>;</span><br><span class="line">fill: black;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.p</span> &#123;</span></span><br><span class="line"><span class="language-css">fill: none;</span></span><br><span class="line"><span class="language-css">stroke: black;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 描边的宽度 */</span></span></span><br><span class="line"><span class="language-css">stroke-<span class="attribute">width</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 虚线间隔 */</span></span></span><br><span class="line"><span class="language-css">stroke-dasharray: <span class="built_in">var</span>(--l);</span></span><br><span class="line"><span class="language-css">stroke-dashoffset: <span class="built_in">var</span>(--l);</span></span><br><span class="line"><span class="language-css"><span class="attribute">animation</span>: stroke <span class="number">2s</span> forwards;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> stroke &#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">stroke-dashoffset: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">fill: black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag"><span class="attr">t</span>=<span class="string">&quot;1688872979658&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;icon&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">viewBox</span>=<span class="string">&quot;0 0 1213 1024&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">p-id</span>=<span class="string">&quot;1041&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">width</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">height</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;p&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">d</span>=<span class="string">&quot;M1024 0c104.561778 0 189.62963 85.067852 189.62963 189.62963v644.74074c0 104.561778-85.067852 189.62963-189.62963 189.62963H900.740741a47.407407 47.407407 0 1 1 0-94.814815h123.259259c52.280889 0 94.814815-42.533926 94.814815-94.814815V189.62963c0-52.280889-42.533926-94.814815-94.814815-94.814815H189.62963c-52.280889 0-94.814815 42.533926-94.814815 94.814815v130.37037a47.407407 47.407407 0 1 1-94.814815 0V189.62963C0 85.067852 85.067852 0 189.62963 0zM878.231704 213.333333c67.309037 0 122.064593 54.755556 122.064592 122.064593V497.777778a47.407407 47.407407 0 1 1-94.814815 0V375.61837L766.160593 516.683852A188.397037 188.397037 0 0 1 791.703704 611.555556V834.37037c0 104.561778-85.067852 189.62963-189.62963 189.62963H189.62963C85.067852 1024 0 938.932148 0 834.37037V611.555556c0-104.561778 85.067852-189.62963 189.62963-189.62963h412.444444c35.678815 0 69.082074 9.91763 97.611852 27.117037L838.84563 308.148148H715.851852a47.407407 47.407407 0 1 1 0-94.814815zM602.074074 516.740741H189.62963c-52.280889 0-94.814815 42.533926-94.814815 94.814815V834.37037c0 52.280889 42.533926 94.814815 94.814815 94.814815h412.444444c52.280889 0 94.814815-42.533926 94.814815-94.814815V611.555556c0-52.280889-42.533926-94.814815-94.814815-94.814815z&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">p-id</span>=<span class="string">&quot;1042&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> paths = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.icon .p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">paths.<span class="title function_">forEach</span>(<span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> len = path.<span class="title function_">getTotalLength</span>();</span></span><br><span class="line"><span class="language-javascript">path.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--l&#x27;</span>, len);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单校验及提交</title>
      <link href="/p/3c957a03/"/>
      <url>/p/3c957a03/</url>
      
        <content type="html"><![CDATA[<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>今天在闲逛各种网站的时候，在登录或注册页面会出现这样子的情况：<br><img src="https://oss.snailuu.cn/article/center/2023070701.png" alt="图片1"></p><blockquote><p>但我就好奇这种没输入信息它在下方就会弹出对应的信息，这中间是否有什么规则在约束呢？</p></blockquote><h1 id="编程环境"><a href="#编程环境" class="headerlink" title="编程环境"></a>编程环境</h1><ol><li>编译器： <code>vscode</code></li><li>框架：<code>vue</code></li><li>UI：<code>element ui</code></li><li>打包工具: <code>npm</code></li></ol><h1 id="源码讲解"><a href="#源码讲解" class="headerlink" title="源码讲解"></a>源码讲解</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://element.eleme.cn/#/zh-CN/component/form#form-item-methods">form 组件</a></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>看到官方提供的<code>API</code>中，可以看到又这样一个参数：<code>rules</code><br><img src="https://oss.snailuu.cn/article/center/2023070702.png" alt="图片2"></p><p>这个属性对应的是一个对象，在<code>&lt;script&gt;&lt;/sript&gt;</code> 标签中可以这样子去定义：<br><img src="https://oss.snailuu.cn/article/center/2023070703.png" alt="图片3"></p><p><strong>解释一下：</strong></p><ol><li><code>rules</code>对象中的对象分别对应表单中各个内容的属性值，即 <code>prop</code> 指向的变量</li><li>这个子对象是一个数组，表示会一 一匹配数组的每一条规则，全部匹配才会返回，这个规则可以是自定义的函数或者官方提供的。</li></ol><h2 id="rules-对象支持属性"><a href="#rules-对象支持属性" class="headerlink" title="rules 对象支持属性"></a>rules 对象支持属性</h2><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>字段是否为必填项</td></tr><tr><td>min</td><td>字段的最小值或最小长度</td></tr><tr><td>max</td><td>字段的最大值或最大长度</td></tr><tr><td>type</td><td>设置字段的数据类型，例如 <code>&#39;email&#39;</code>、<code>&#39;url&#39;</code>、<code>&#39;number&#39;</code> 等</td></tr><tr><td>pattern</td><td>设置字段的正则表达式模式</td></tr><tr><td>validator</td><td>自定义验证函数，用于执行复杂的验证逻辑</td></tr><tr><td>trigger</td><td>触发验证的事件，默认是 <code>&#39;blur&#39;</code>，也可以是 <code>&#39;change&#39;</code>、<code>&#39;input&#39;</code> 等</td></tr><tr><td>message</td><td>验证失败时显示的错误消息</td></tr></tbody></table><h2 id="两种显示信息方式"><a href="#两种显示信息方式" class="headerlink" title="两种显示信息方式"></a>两种显示信息方式</h2><ol><li>通过<code>message</code> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line"><span class="attr">pass</span>: [&#123; <span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入密码&#x27;</span> &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过回调函数<code>callback()</code> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> <span class="title function_">checkCode</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">     <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;验证码不能为空&#x27;</span>));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">callback</span>();</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"> <span class="attr">rules</span>: &#123;</span><br><span class="line">       <span class="attr">pass</span>: [</span><br><span class="line">         &#123; <span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span><br><span class="line">       ],</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>最后附上本次测试的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;form&quot;&gt;</span><br><span class="line">&lt;el-form</span><br><span class="line">:model=&quot;ruleForm&quot;</span><br><span class="line">status-icon</span><br><span class="line">:rules=&quot;rules&quot;</span><br><span class="line">ref=&quot;ruleForm&quot;</span><br><span class="line">label-width=&quot;100px&quot;</span><br><span class="line">class=&quot;demo-ruleForm&quot;&gt;</span><br><span class="line">&lt;el-form-item</span><br><span class="line">label=&quot;密码&quot;</span><br><span class="line">prop=&quot;pass&quot;&gt;</span><br><span class="line">&lt;el-input</span><br><span class="line">type=&quot;password&quot;</span><br><span class="line">v-model=&quot;ruleForm.pass&quot;</span><br><span class="line">autocomplete=&quot;off&quot;</span><br><span class="line">placeholder=&quot;请输入密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">&lt;el-form-item</span><br><span class="line">label=&quot;确认密码&quot;</span><br><span class="line">prop=&quot;checkPass&quot;&gt;</span><br><span class="line">&lt;el-input</span><br><span class="line">type=&quot;password&quot;</span><br><span class="line">v-model=&quot;ruleForm.checkPass&quot;</span><br><span class="line">autocomplete=&quot;off&quot;</span><br><span class="line">placeholder=&quot;请再次输入密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">&lt;el-form-item</span><br><span class="line">label=&quot;验证码&quot;</span><br><span class="line">prop=&quot;code&quot;&gt;</span><br><span class="line">&lt;el-col class=&quot;code-col&quot;&gt;</span><br><span class="line">&lt;el-input</span><br><span class="line">v-model.number=&quot;ruleForm.code&quot;</span><br><span class="line">style=&quot;width:140px&quot;</span><br><span class="line">placeholder=&quot;输入验证码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;img</span><br><span class="line">src=&quot;http://demo.ruoyi.vip/captcha/captchaImage?type=math&quot;</span><br><span class="line">alt=&quot;&quot;</span><br><span class="line">width=&quot;60&quot; /&gt;</span><br><span class="line">&lt;/el-col&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">&lt;el-form-item&gt;</span><br><span class="line">&lt;el-button</span><br><span class="line">type=&quot;primary&quot;</span><br><span class="line">@click=&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span><br><span class="line">&gt;提交&lt;/el-button</span><br><span class="line">&gt;</span><br><span class="line">&lt;el-button @click=&quot;resetForm(&#x27;ruleForm&#x27;)&quot;&gt;重置&lt;/el-button&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">var checkCode = (rule, value, callback) =&gt; &#123;</span><br><span class="line">if (!value) &#123;</span><br><span class="line">return callback(new Error(&#x27;验证码不能为空&#x27;));</span><br><span class="line">&#125;</span><br><span class="line">callback();</span><br><span class="line">&#125;;</span><br><span class="line">var validatePass = (rule, value, callback) =&gt; &#123;</span><br><span class="line">if (value === &#x27;&#x27;) &#123;</span><br><span class="line">callback(new Error(&#x27;请输入密码&#x27;));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if (this.ruleForm.checkPass !== &#x27;&#x27;) &#123;</span><br><span class="line">this.$refs.ruleForm.validateField(&#x27;checkPass&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">var validatePass2 = (rule, value, callback) =&gt; &#123;</span><br><span class="line">if (value === &#x27;&#x27;) &#123;</span><br><span class="line">callback(new Error(&#x27;请再次输入密码&#x27;));</span><br><span class="line">&#125; else if (value !== this.ruleForm.pass) &#123;</span><br><span class="line">callback(new Error(&#x27;两次输入密码不一致!&#x27;));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">return &#123;</span><br><span class="line">ruleForm: &#123;</span><br><span class="line">pass: &#x27;&#x27;,</span><br><span class="line">checkPass: &#x27;&#x27;,</span><br><span class="line">code: &#x27;&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">rules: &#123;</span><br><span class="line">pass: [&#123; validator: validatePass, trigger: &#x27;blur&#x27;, message: &#x27;123&#x27; &#125;],</span><br><span class="line">checkPass: [&#123; validator: validatePass2, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">code: [&#123; validator: checkCode, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">submitForm(formName) &#123;</span><br><span class="line">this.$refs[formName].validate((valid) =&gt; &#123;</span><br><span class="line">if (valid) &#123;</span><br><span class="line">alert(&#x27;submit!&#x27;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(&#x27;error submit!!&#x27;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">resetForm(formName) &#123;</span><br><span class="line">this.$refs[formName].resetFields();</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.form &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">&amp; .code-col &#123;</span><br><span class="line">display: flex;</span><br><span class="line">gap: 16px;</span><br><span class="line">height: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><center><h1>注意：上面代码是已经引入element ui组件库的哦</h1></center>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端零碎小知识</title>
      <link href="/p/25c31a8f/"/>
      <url>/p/25c31a8f/</url>
      
        <content type="html"><![CDATA[<h1 id="js-部分"><a href="#js-部分" class="headerlink" title="js 部分"></a>js 部分</h1><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><ul><li>export 用于导出一个或多个变量、函数、类</li><li>export default 用户导出一个默认的值</li></ul><p>两者导出和导入</p><p><code>exprot</code> 导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出多个命名的变量或函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;snailuu&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>export</code> 导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name, greet &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.js&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>export default</code> 导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出默认的函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Default export&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>export default</code> 导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myFunction <span class="keyword">from</span> <span class="string">&#x27;./app.js&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><ul><li>concat 用于将多个字符串拼接成一个字符串</li><li>concat 可以接受一个或多个参数，并在其中使用逗号分隔它们</li><li>concat 返回一个字符串<br>使用方法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> result = str1.<span class="title function_">concat</span>(<span class="string">&#x27; &#x27;</span>, str2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出: &quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><h2 id="对象传递与引用"><a href="#对象传递与引用" class="headerlink" title="对象传递与引用"></a>对象传递与引用</h2><p>如果想在方法中给对象重新赋值，直接通过<code>obj.属性值</code>这样子去修改，而不是通过<code>obj=&#123;新对象&#125;</code>这样子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改对象，仅保留需要的属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj 要修改的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array&lt;string&gt;</span>&#125; keys 需要保留的属性名数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">includes</span>(<span class="params">arr, target</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] === target) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pick</span>(<span class="params">obj, keys</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_">includes</span>(keys, key)) &#123;</span><br><span class="line"><span class="comment">// 不保留此属性</span></span><br><span class="line"><span class="keyword">delete</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">d</span>: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">pick</span>(obj, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><h2 id="原型减少内存"><a href="#原型减少内存" class="headerlink" title="原型减少内存"></a>原型减少内存</h2><p>如果在对象中声明一个方法，不同的实例对象会开辟不同的方法内存，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好，我是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;，今年&#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;huang&#x27;</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">var</span> u2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;黄哈哈&#x27;</span>, <span class="number">77</span>);</span><br><span class="line"><span class="keyword">var</span> u3 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;李大炮&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>这样子在分别实例化<code>u1</code>、<code>u2</code>、<code>u3</code>的时候都会开辟一个各自的方法内存，在控制台打印<code>u1.sayHi === u2.sayHi</code> 会输出<code>false</code></p><p><img src="https://oss.snailuu.cn/article/center/20211210141850.png"></p><blockquote><p>每个<strong>函数</strong>都会自动附带一个属性<code>prototype</code>，这个属性的值是一个普通对象，称之为原型对象</p></blockquote><p>每个实例属性的查找流程：</p><ul><li>先看本身是否有该属性</li><li>如果没有查看隐式原型<br>这样一来上面的代码就可以写成下面这样子：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好，我是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;，今年&#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;huang&#x27;</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">var</span> u2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;黄哈哈&#x27;</span>, <span class="number">77</span>);</span><br><span class="line"><span class="keyword">var</span> u3 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;李大炮&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><h2 id="call-x2F-apply"><a href="#call-x2F-apply" class="headerlink" title="call&#x2F;apply"></a>call&#x2F;apply</h2><p>两者作用：改变 <code>this</code> 的指向<br>区别：</p><table><thead><tr><th>call</th><th>apply</th></tr></thead><tbody><tr><td>第一个参数为指向的对象，后面依次为对应函数的参数</td><td>第一个参数为指向的对象，第二个参数为一个数组，里面内容依次为对应函数的参数</td></tr></tbody></table><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><img src="https://oss.snailuu.cn/article/center/20210903152359.png"></p><ul><li>判断原型：<code>instanceof</code></li><li>获取隐式原型：<code>getPrototypeOf()</code></li><li>创建空原型对象（无<strong>proto</strong>）：<code>Object.create()</code></li><li>改变隐式原型指向：<code>setPrototypeOf(obj, prototype)</code> （设置 obj 的隐式原型为 prototype）</li></ul><h1 id="css-部分"><a href="#css-部分" class="headerlink" title="css 部分"></a>css 部分</h1><h1 id="vue-部分"><a href="#vue-部分" class="headerlink" title="vue 部分"></a>vue 部分</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>vue3 项目引入全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main.<span class="property">js</span>;</span><br><span class="line"><span class="keyword">const</span> req_url = <span class="string">&#x27;http://192.168.1.118:8000/&#x27;</span>;</span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;req_url&#x27;</span>, req_url);</span><br></pre></td></tr></table></figure><p>在其<code>setup</code>直接引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;<span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>; <span class="title function_">inject</span>(<span class="string">&#x27;req_url&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日更 </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于vuex的小知识</title>
      <link href="/p/8ad80637/"/>
      <url>/p/8ad80637/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>官方文档</strong></p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://vuex.vuejs.org/zh/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://oss.snailuu.cn/article/center/vue.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Vuex文档</div>            <div class="tag-link-sitename"></div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="Vuex-是什么？"><a href="#Vuex-是什么？" class="headerlink" title="Vuex 是什么？"></a>Vuex 是什么？</h2><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p></blockquote><p>在这里有一个名词<em>状态管理</em>，个人的理解是：把网站比喻成一个对象，在网站上进行的各种操作，调用某些接口来修改指定的信息，而这些被修改的信息可以称之为网站的状态，状态管理相当于用一个较为方便的插件&#x2F;组件来对其进行修改。</p><h2 id="如何开始？"><a href="#如何开始？" class="headerlink" title="如何开始？"></a>如何开始？</h2><p>官方提供了多种导入方式</p><ol><li>直接引用 <code>cdn</code>： <code>https://unpkg.com/vuex@4.0.0/dist/vuex.global.js</code></li><li>用 <code>npm</code> 安装：<code>npm install vuex@next --save</code></li><li>用 <code>yarn</code> 安装： <code>yarn add vuex@next --save</code></li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>创建一个新的 <code>store</code> 文件夹，在 <code>store</code> 文件夹下面再创建一个 <code>index.js</code> 来作为整个 <code>vuex</code> 文件的入口</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line"><span class="comment">// 定义应用程序的状态</span></span><br><span class="line"><span class="comment">// 例如：user: null,</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line"><span class="comment">// 定义修改状态的方法</span></span><br><span class="line"><span class="comment">// 例如：SET_USER(state, user) &#123; state.user = user; &#125;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line"><span class="comment">// 定义处理异步操作的方法</span></span><br><span class="line"><span class="comment">// 例如：fetchUser(&#123; commit &#125;) &#123; API.fetchUser().then(user =&gt; commit(&#x27;SET_USER&#x27;, user)); &#125;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line"><span class="comment">// 定义计算派生状态的方法</span></span><br><span class="line"><span class="comment">// 例如：isLoggedIn(state) &#123; return state.user !== null; &#125;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在组件中如果想要使用的话，直接 <code>this.$store.state.user</code> 就可以读取 <code>user</code> 的状态了</p></li></ol><h1 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>这里面存放各个<strong>状态对象</strong>的属性值，这些属性值可以是整数、字符串、数组、对象等等。如果想要修改这里面的属性值的话一般由 <code>mutation</code> 来提交修改。</p><h2 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h2><p>这个部分书写一些对于 <code>state</code> 修改的操作。<br>在组件想要提交这种修改的话可以通过 <code>this.$store.commit(&#39;xxx&#39;)</code> 来提交修改，或者使用 <code>mapMutations</code> 辅助函数将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">...<span class="title function_">mapMutations</span>([</span><br><span class="line"><span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line"><span class="string">&#x27;incrementBy&#x27;</span>, <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">]),</span><br><span class="line">...<span class="title function_">mapMutations</span>(&#123;</span><br><span class="line"><span class="attr">add</span>: <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line">&#125;),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过上面的映射之后，可以看出下面两种写法是等价的</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">使用commit</button></li><li class="tab"><button type="button" data-href="#test1-2">使用辅助函数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">...<span class="title function_">mapMutations</span>([</span><br><span class="line"><span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line"><span class="string">&#x27;incrementBy&#x27;</span>, <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">]),</span><br><span class="line"><span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">increment</span>(<span class="number">10</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><hr><p>而在 <code>store</code> 里面，<code>mutation</code> 的写法是这样子的：</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">一个参数</button></li><li class="tab"><button type="button" data-href="#test1-2">两个参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.<span class="property">count</span> += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p><code>action</code> 类似于 <code>mutation</code></p><details class="folding-tag" cyan><summary> 查看不同 </summary>              <div class='content'>              <ol><li><code>action</code> 提交的是 <code>mutation</code>，而不是直接变更状态。</li><li><code>action</code> 可以包含任意异步操作。</li></ol>              </div>            </details><p>简单注册一个<code>action</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line"><span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line"><span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">state.<span class="property">count</span>++;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line"><span class="title function_">increment</span>(<span class="params">context</span>) &#123;</span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>在里面也可以使用 <a href="https://github.com/lukehoban/es6features#destructuring">ES6 解构</a> 进行简化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在注册 <code>action</code> 的处理函数总是接受 <code>context</code> 作为第一个参数，<code>payload</code> 作为第二个参数（可选），<code>context</code> 对象包含以下属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">state, <span class="comment">// 等同于 `store.state`，若在模块中则为局部状态</span></span><br><span class="line">rootState, <span class="comment">// 等同于 `store.state`，只存在于模块中</span></span><br><span class="line">commit, <span class="comment">// 等同于 `store.commit`</span></span><br><span class="line">dispatch, <span class="comment">// 等同于 `store.dispatch`</span></span><br><span class="line">getters, <span class="comment">// 等同于 `store.getters`</span></span><br><span class="line">rootGetters; <span class="comment">// 等同于 `store.getters`，只存在于模块中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>在组件可以通过 <code>dispatch</code> 方法触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">dispatch</span>(<span class="string">&#x27;increment&#x27;</span>);</span><br></pre></td></tr></table></figure><p>同时也可以采用类似上面的说的辅助函数 <code>mapActions</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">...<span class="title function_">mapActions</span>([</span><br><span class="line"><span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line"><span class="string">&#x27;incrementBy&#x27;</span>, <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">]),</span><br><span class="line">...<span class="title function_">mapActions</span>(&#123;</span><br><span class="line"><span class="attr">add</span>: <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line">&#125;),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h2><p>相当于是 <code>store</code> 的计算属性，也可以理解成 <code>vue</code> 组件中的<code>computed</code> 属性，只不过它只用来计算 <code>store</code> 里面的属性，它接收 <code>state</code> 作为第一个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line"><span class="attr">todos</span>: [</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line"><span class="title function_">doneTodos</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.<span class="property">done</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>它还有多种访问的方式：</p><ol><li><p>通过属性访问</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="property">getters</span>.<span class="property">doneTodos</span>; <span class="comment">// -&gt; [&#123; id: 1, text: &#x27;...&#x27;, done: true &#125;]</span></span><br></pre></td></tr></table></figure></li><li><p>通过方法访问</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">getTodoById</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.<span class="property">id</span> === id);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="property">getters</span>.<span class="title function_">getTodoById</span>(<span class="number">2</span>); <span class="comment">// -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>辅助函数<code>mapGetters</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"><span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">...<span class="title function_">mapGetters</span>([</span><br><span class="line"><span class="string">&#x27;doneTodosCount&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;anotherGetter&#x27;</span>,</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">]),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><hr><div class="note success simple"><p>好了，今天的 vuex 初步认识就到这里啦，如果上面说的有错误欢迎在下面评论区进行说明</p></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用json-server模拟后端接口</title>
      <link href="/p/30f65c9e/"/>
      <url>/p/30f65c9e/</url>
      
        <content type="html"><![CDATA[<h1 id="json-server-是什么？"><a href="#json-server-是什么？" class="headerlink" title="json-server 是什么？"></a>json-server 是什么？</h1><h2 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h2><blockquote><p>在学习后端的时候通常会使用 <code>postman</code> 来模拟前端发送请求，然后再来进行对后端部分逻辑代码进行调节。<br>但这段时间在学习前端的时候我就在想有没有类似 <code>postman</code> 的工具来模拟后端接收来自前端的请求并返回数据的？<br>在学习 <code>axios</code> 的时候顺便看到有人使用 <code>json-server</code> 这个插件来实现我上面说的内容，简单来说就是可以模拟后端接收请求并返回一定的数据</p></blockquote><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/typicode/json-server">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://oss.snailuu.cn/article/sucai/github.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">json-server</div>            <div class="tag-link-sitename"></div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ol><li>Node.js</li><li>npm</li><li>vscode</li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol><li>在终端输入： <code>npm install -g json-server</code> 进行全局安装</li><li>选择一个文件夹并创建 <code>data.json</code> 文件</li><li>文件内容： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;stu&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;snailuu&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;88888888@163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18888888888&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;friends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>终端进入到该文件夹并输入 <code>json-server --watch data.json</code></li></ol><p>此时在终端可以看到有有输出<br><img src="https://oss.snailuu.cn/article/center/json-server-1.png" alt="json-server-1"><br>出现了两个地址，一个是 <code>json-server</code> 提供的首页地址，另外一个就是我们的发送请求的地址。</p><h2 id="data-json-内容"><a href="#data-json-内容" class="headerlink" title="data.json 内容"></a>data.json 内容</h2><blockquote><p>关于<strong>data.json</strong>里面的内容，里面总的是由一个对象构成，里面的 <code>key</code> 就是接口地址， <code>value</code> 就是返回的数据内容<br><img src="https://oss.snailuu.cn/article/center/json-server-4.png" alt="json-server-4"></p></blockquote><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p>这里采用 <code>postman</code> 进行数据的发送<br><img src="https://oss.snailuu.cn/article/center/json-server-3.png" alt="json-server-3"></p><p>然后也可以对其进行增删查改。</p><ol><li>在 <code>data.json</code> 文件中新增 <em>test</em> 接口<br><img src="https://oss.snailuu.cn/article/center/json-server-5.png" alt="json-server-5"></li><li>请求地址更换成：<a href="http://localhost:3000/test">http://localhost:3000/test</a></li><li>请求类型更换成：POST</li></ol><p><img src="https://oss.snailuu.cn/article/center/json-server-6.png" alt="json-server-6"></p><p>可以看到 <code>data.json</code> 文件已经被修改了<br>其他的操作也大同小异。</p><center><span class='p cyan h2'>简单接口测试再也不用麻烦后端同学了，赶紧去试试吧</span></center>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用github-Action实现自动化部署</title>
      <link href="/p/9afd8765/"/>
      <url>/p/9afd8765/</url>
      
        <content type="html"><![CDATA[<h1 id="前提要求"><a href="#前提要求" class="headerlink" title="前提要求"></a>前提要求</h1><h2 id="创建两个远程仓库"><a href="#创建两个远程仓库" class="headerlink" title="创建两个远程仓库"></a>创建两个远程仓库</h2><p>这里采用 <code>github</code> 平台</p><p><img src="http://oss.snailuu.cn/picgo/image-20230623004808613.png" alt="image-20230623004808613"></p><blockquote><p>source-repo 作为项目的总源码仓库，而另外一个作为部署后的工作仓库</p></blockquote><h2 id="申请-token"><a href="#申请-token" class="headerlink" title="申请 token"></a>申请 token</h2><p>在<code>Settings/Developer Settings/Personal accses tokens/Tokens(classic)</code>设置下新建<code>token</code></p><p><img src="http://oss.snailuu.cn/picgo/image-20230623005630047.png" alt="image-20230623005630047"></p><p><img src="http://oss.snailuu.cn/picgo/image-20230623005900876.png" alt="image-20230623005900876"></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在<code>.github/workflows</code>下新建文件<code>autodeploy.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">    <span class="attr">push:</span></span><br><span class="line">        <span class="attr">branches:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">release:</span></span><br><span class="line">        <span class="attr">types:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">        <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">        <span class="attr">steps:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">              <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">              <span class="attr">with:</span></span><br><span class="line">                  <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">              <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">              <span class="attr">with:</span></span><br><span class="line">                  <span class="attr">node-version:</span> <span class="string">&#x27;18.x&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">              <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                  export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">                  npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span>            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">              <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line">              <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">              <span class="attr">with:</span></span><br><span class="line">                  <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">              <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">              <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                  npm install --save</span></span><br><span class="line"><span class="string">                  # npm install gulp-cli -g</span></span><br><span class="line"><span class="string"></span>            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">              <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                  hexo clean</span></span><br><span class="line"><span class="string">                  hexo generate</span></span><br><span class="line"><span class="string">                  # gulp</span></span><br><span class="line"><span class="string">                  #hexo bangumi -u</span></span><br><span class="line"><span class="string">                  #hexo cinema -u</span></span><br><span class="line"><span class="string"></span>            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">              <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                  cd ./public</span></span><br><span class="line"><span class="string">                  git init</span></span><br><span class="line"><span class="string">                  git config --global user.name &#x27;$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;&#x27;</span></span><br><span class="line"><span class="string">                  git config --global user.email &#x27;$&#123;&#123; secrets.GITHUBEMAIL &#125;&#125;&#x27;</span></span><br><span class="line"><span class="string">                  git add .</span></span><br><span class="line"><span class="string">                  git commit -m &quot;U updated via Github Actions.&quot;</span></span><br><span class="line"><span class="string">                  git push --force --quiet &quot;https://$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;:$&#123;&#123; secrets.GITHUBTOKEN &#125;&#125;@github.com/$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;/hexo-blog.git&quot; master:main # 后面的仓库地址改成自己的工作仓库地址</span></span><br><span class="line"><span class="string">                  # git push --force --quiet &quot;https://$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;:$&#123;&#123; secrets.GITHUBTOKEN &#125;&#125;@github.com/$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;/$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;.github.io.git&quot; master:main</span></span><br><span class="line"><span class="string">                  # git push --force --quiet &quot;https://$&#123;&#123; secrets.GITEEUSERNAME &#125;&#125;:$&#123;&#123; secrets.GITEETOKEN &#125;&#125;@gitee.com/$&#123;&#123; secrets.GITEEUSERNAME &#125;&#125;/$&#123;&#123; secrets.GITEEUSERNAME &#125;&#125;.git&quot; master:master</span></span><br><span class="line"><span class="string"></span>        <span class="comment"># - name: 构建 Gitee Pages</span></span><br><span class="line">        <span class="comment">#   uses: yanglbme/gitee-pages-action@master</span></span><br><span class="line">        <span class="comment">#   with:</span></span><br><span class="line">        <span class="comment">#       gitee-username: $&#123;&#123; secrets.GITEEUSERNAME &#125;&#125;</span></span><br><span class="line">        <span class="comment">#       gitee-password: $&#123;&#123; secrets.GITEE_PASSWORD &#125;&#125;</span></span><br><span class="line">        <span class="comment">#       gitee-repo: $&#123;&#123; secrets.GITEEUSERNAME &#125;&#125;/$&#123;&#123; secrets.GITEEUSERNAME &#125;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="第一步、添加环境变量"><a href="#第一步、添加环境变量" class="headerlink" title="第一步、添加环境变量"></a>第一步、添加环境变量</h1><p><img src="http://oss.snailuu.cn/picgo/image-20230623010045260.png" alt="image-20230623010045260"></p><p>在这里我只是部署到<code>github</code>上，如有其他平台可以根据<code>autodeploy.yml</code>文件里的部署步骤下的<code>run</code>命令自行添加，里面各自的$环境变量$也得在上面图中填写</p><p>部分变量说明：</p><blockquote><p>GITHUBUSERNAME：github 用户名</p><p>GITHUBEMAIL：github 邮箱</p><p>GITHUBTOKEN：上面创建的 token</p></blockquote><h1 id="第二步、将-hexo-代码上传到远程仓库"><a href="#第二步、将-hexo-代码上传到远程仓库" class="headerlink" title="第二步、将 hexo 代码上传到远程仓库"></a>第二步、将 hexo 代码上传到远程仓库</h1><p>上传等一会儿就可以点开<code>Actions</code>页面看项目的部署情况</p><p><img src="http://oss.snailuu.cn/picgo/image-20230623010531992.png" alt="image-20230623010531992"></p><p><img src="http://oss.snailuu.cn/picgo/image-20230623010605536.png" alt="image-20230623010605536"></p><p><img src="http://oss.snailuu.cn/picgo/image-20230623010621264.png" alt="image-20230623010621264"></p><p>等部署完成之后打开工作仓库<code>hexo-blog</code>就可以看到有一个<code>commit</code></p><p><img src="http://oss.snailuu.cn/picgo/image-20230623010734669.png" alt="image-20230623010734669"></p><h1 id="第三步、利用-vercel-部署项目"><a href="#第三步、利用-vercel-部署项目" class="headerlink" title="第三步、利用 vercel 部署项目"></a>第三步、利用 vercel 部署项目</h1><p>这里选择用<code>vercel</code>来对项目进行部署，如有其他选择可以自行选择。</p><p>注册<code>vercel</code>账号 - <code>Add New Project</code></p><p><img src="http://oss.snailuu.cn/picgo/image-20230623010915680.png" alt="image-20230623010915680"></p><p>直接导入刚才的<code>hexo-blog</code>仓库</p><p><img src="http://oss.snailuu.cn/picgo/image-20230623011009424.png" alt="image-20230623011009424"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
